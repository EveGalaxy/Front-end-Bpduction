import asyncio
from bleak import BleakScanner
import requests

# ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
LAPTOP_INDEX = 4             # üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1-4 ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
PRODUCT_ID = 10               # ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å
BEACON_MAPPING = {
    "IBKS 105 No 1": 1,
    "IBKS 105 No 2": 2,
    "IBKS 105 No 3": 3,
    "IBKS 105 No 4": 4,
    "IBKS 105 No 5": 5,
    "IBKS 105 No 6": 6
}
BACKEND_URL = "http://localhost:5000/update-rssi-current"  # URL backend

# üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á RSSI ‡πÑ‡∏õ API
def send_rssi_to_api(product_id, beacon_id, rssi, laptop_index):
    payload = {
        "productId": product_id,
        "beaconId": beacon_id,
        "rssi": rssi,
        "laptopIndex": laptop_index
    }

    try:
        res = requests.post(BACKEND_URL, json=payload)
        if res.status_code == 200:
            print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ RSSI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {rssi} (Laptop {laptop_index})")
        else:
            print(f"‚ùå ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ RSSI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", res.text)
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á: {e}")

# üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô BLE ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
async def scan_and_send():
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô Beacon: ...")
    devices = await BleakScanner.discover(timeout=5.0)

    for d in devices:
        beacon_name = d.name
        if beacon_name in BEACON_MAPPING:
            beacon_id = BEACON_MAPPING[beacon_name]
            send_rssi_to_api(PRODUCT_ID, beacon_id, d.rssi, LAPTOP_INDEX)

    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Beacon ")

# üîÅ Loop ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
async def loop_scan(interval=10):
    while True:
        await scan_and_send()
        await asyncio.sleep(interval)

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô
asyncio.run(loop_scan())
